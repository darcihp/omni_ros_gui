#!/usr/bin/env python3
# -*- encoding: iso-8859-1 -*-
import numpy as np
import roslib
import sys
import cv2
import rospy
from sensor_msgs.msg import Image
from nav_msgs.msg import Odometry
from omni_ros_gui.msg import m_flags
from cv_bridge import CvBridge, CvBridgeError
import imutils
import matplotlib.pyplot as plt
import rospkg

class c_feature:
	def __init__(self):

		self.aquisition = 0
		#Carrega endereco do package omni_ros_gui
		rospac = rospkg.RosPack()
		self.omni_ros_gui_path = rospac.get_path("omni_ros_gui")
		self.omni_ros_gui_path += "/scripts"

		#Abre arquivo para escrita da nova feature
		self.fout = open(self.omni_ros_gui_path + "/features" ,"w")
		print("Arquivo aberto")

                #self.image_pub = rospy.Publisher("n_img", Image, queue_size = 10)
		self.bridge = CvBridge();
		self.image_sub = rospy.Subscriber("/usb_cam/image_raw", Image, self._img_raw)
		self.odom_sub = rospy.Subscriber("/odom", Odometry, self._get_odom)
		self.flags_sub = rospy.Subscriber("/t_flags", m_flags, self._get_flags)

		#inicializa contador
		self.i = 0

	def __del__(self):
		print ("Bye")


	def _stop(self):
		#Fecha arquivo
		print("Stop aquisition...")
		self.fout.close
		print("Features saved")
		rospy.signal_shutdown("Acabou")

	def _get_flags(self, data):
		## Finalizar aquisição
		if data.aquisition == 0 and (self.aquisition == 1 or self.aquisition == 2):
			self.aquisition = 0
			self._stop()
		else:
			if data.aquisition == 1:
				if self.aquisition == 0:
					print("Start aquisition...")
				else:
					print("Re-start aquisition...")

				self.aquisition = 1
			else:
				if data.aquisition == 2:
					print("Pause aquisition...")
					self.aquisition = 2

	def _get_odom(self, data):
		if self.aquisition == 1:
			label = self.omni_ros_gui_path + "/img/img_"+str(self.i)+".jpg"
			x = data.pose.pose.position.x
			y = data.pose.pose.position.y
			t = data.pose.pose.orientation.w #TODO
			self.fout.write("img_"+str(self.i)+" "+ str(x) +" "+str(y)+" "+str(t))
			self.fout.write("\n")
			self.fout.flush()
			cv2.imwrite(label, self.img_turned)
			self.i = self.i + 1

	def _img_raw(self, data):
		#Converte img_raw para img_opencv em escala de cinza
		try:
			img_original = self.bridge.imgmsg_to_cv2(data, "bgr8")
			#Tamanho para transformar a imagem
			x = 100
			y = 100
			#Redimenciona a imagem
			img_resized = cv2.resize(img_original, (x, y))
			self.img_turned = imutils.rotate(img_resized, 270)

		except CvBridgeError as e:
                	rospy.loginfo(e)
def main(args):
	cf = c_feature()
	rospy.init_node('n_feature', anonymous=True)

	while not rospy.is_shutdown():
		rospy.spin()

if __name__ == '__main__':
        main(sys.argv)




